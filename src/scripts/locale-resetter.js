import { WebflowClient } from 'webflow-api';

const client = new WebflowClient({
  accessToken:
    'c00dcd136673f885167fcaef8953090d7d6b5d6c9d72ce184deec78306da0ce0',
});

const collectionId = '6835b112c3b6c4918ba31e30';
const secondaryLocaleId = '683eef28b9ac5937626f4098';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–∫–∞–ª–∏
async function getAllItems(collectionId) {
  let offset = 0;
  const limit = 100;
  let allItems = [];

  console.log('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–∫–∞–ª–∏...');

  while (true) {
    const response = await client.collections.items.listItems(collectionId, {
      limit,
      offset,
    });

    allItems = allItems.concat(response.items);
    console.log(
      `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${response.items.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–≤—Å–µ–≥–æ: ${allItems.length})`
    );

    if (offset + limit >= response.pagination.total) break;
    offset += limit;
  }

  console.log(`‚úÖ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${allItems.length}`);
  return allItems;
}

try {
  const items = await getAllItems(collectionId);

  console.log('–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –≤—Ç–æ—Ä–æ–π –ª–æ–∫–∞–ª–∏...');

  // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é –Ω–∞ –≤—Ç–æ—Ä–æ–π –ª–æ–∫–∞–ª–∏
  for (const item of items) {
    const itemId = item.id;
    const itemName = item.fieldData.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';

    console.log(`üîÑ –°–æ–∑–¥–∞—ë—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç: ${itemName} (ID: ${itemId})`);

    try {
      const createdItem = await client.collections.items.createItem(
        collectionId,
        {
          ...item,
          cmsLocaleId: secondaryLocaleId,
        }
      );

      console.log(
        `‚úÖ –≠–ª–µ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: ${createdItem.fieldData.name} (ID: ${createdItem.id})`
      );
    } catch (error) {
      console.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ ${itemId}:`,
        error.message
      );
    }
  }

  console.log('üéâ –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.');
} catch (error) {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
}
